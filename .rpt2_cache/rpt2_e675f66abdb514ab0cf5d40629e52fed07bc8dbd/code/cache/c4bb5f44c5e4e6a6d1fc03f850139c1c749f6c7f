{"map":"{\"version\":3,\"file\":\"fetch.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/core/fetch.ts\"],\"names\":[],\"mappings\":\"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\"}","code":"import { __awaiter, __generator } from \"tslib\";\nimport { encode } from 'js-base64';\nimport { getTimestamp, uuid } from \"./util\";\nvar originFetch = window.fetch;\n// 拦截fetch\nvar interceptFetch = function (_a) {\n    var pagePath = _a.pagePath, onError = _a.onError, onBefore = _a.onBefore, onAfter = _a.onAfter;\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return __awaiter(void 0, void 0, void 0, function () {\n            var url, options, startTime, traceId, traceSegmentId, appId, appVersion, traceIdStr, segmentId, service, instance, endpoint, peer, index, values, res, err_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        url = args[0], options = args[1];\n                        startTime = getTimestamp();\n                        traceId = uuid();\n                        traceSegmentId = uuid();\n                        appId = uuid();\n                        appVersion = 'v1.0.0';\n                        if (Object.prototype.toString.call(args[0]) === '[object Request]') {\n                            url = new URL(url.url);\n                        }\n                        else {\n                            if (args[0].startsWith('http://') || args[0].startsWith('https://')) {\n                                url = new URL(args[0]);\n                            }\n                            else if (args[0].startsWith('//')) {\n                                url = new URL(\"\".concat(window.location.protocol).concat(args[0]));\n                            }\n                            else {\n                                url = new URL(window.location.href);\n                                url.pathname = args[0];\n                            }\n                        }\n                        traceIdStr = String(encode(traceId));\n                        segmentId = String(encode(traceSegmentId));\n                        service = String(encode(appId));\n                        instance = String(encode(appVersion));\n                        endpoint = String(encode(pagePath));\n                        peer = String(encode(url.host));\n                        index = 1;\n                        values = \"\".concat(1, \"-\").concat(traceIdStr, \"-\").concat(segmentId, \"-\").concat(index, \"-\").concat(service, \"-\").concat(instance, \"-\").concat(endpoint, \"-\").concat(peer);\n                        if (!options) {\n                            options = {};\n                        }\n                        if (!options.headers) {\n                            options.headers = {};\n                        }\n                        options.headers['sw8'] = values;\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        onBefore && onBefore({\n                            url: url,\n                            method: options.method,\n                            options: options\n                        });\n                        return [4 /*yield*/, originFetch(url, options)];\n                    case 2:\n                        res = _a.sent();\n                        onAfter && onAfter(res);\n                        return [3 /*break*/, 4];\n                    case 3:\n                        err_1 = _a.sent();\n                        if (!!options.signal && err_1.name == 'AbortError') {\n                            onError({\n                                url: url,\n                                status: res.status,\n                                statusText: res.statusText,\n                                method: options.method,\n                                body: options.body,\n                                elapsedTime: getTimestamp() - startTime,\n                            });\n                        }\n                        else {\n                            throw err_1;\n                        }\n                        return [3 /*break*/, 4];\n                    case 4:\n                        if (!(res.ok && res.status >= 200 && res.status < 300)) {\n                            onError({\n                                url: url,\n                                status: res.status,\n                                statusText: res.statusText,\n                                method: options.method,\n                                body: options.body,\n                                elapsedTime: getTimestamp() - startTime,\n                            });\n                        }\n                        return [2 /*return*/, res];\n                }\n            });\n        });\n    };\n};\nexport default interceptFetch;\n//# sourceMappingURL=fetch.js.map","dts":{"name":"D:/PersonalProject/fontend-trace-geekbang-course/trace-sdk/dist/types/core/fetch.d.ts","writeByteOrderMark":false,"text":"export type OnFetchError = {\n    url: string;\n    status: number;\n    statusText: string;\n    method: 'POST' | 'GET';\n    body: any;\n    elapsedTime: number;\n};\nexport type OnBeforeProps = {\n    url: string;\n    method: 'POST' | 'GET';\n    options?: RequestInit;\n};\nexport type InterceptFetchType = {\n    pagePath: string;\n    onError: (error: OnFetchError) => void;\n    onBefore?: (props: OnBeforeProps) => void;\n    onAfter?: (result: any) => void;\n};\ndeclare const interceptFetch: ({ pagePath, onError, onBefore, onAfter }: InterceptFetchType) => (...args: any) => Promise<any>;\nexport default interceptFetch;\n"}}
